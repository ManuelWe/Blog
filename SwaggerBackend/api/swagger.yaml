---
swagger: "2.0"
info:
  description: "Blog Web Service for Web Engineering II"
  version: "1.0.0"
  title: "Blog"
host: "localhost:3000"
tags:
- name: "users"
  description: "registered users"
- name: "articles"
  description: "available articles"
- name: "comments"
  description: "available comments"
schemes:
- "http"
paths:
  /api/users:
    get:
      tags:
      - "users"
      summary: "Retrieve all users"
      operationId: "apiUsersGET"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
      x-swagger-router-controller: "Users"
    post:
      tags:
      - "users"
      summary: "Create a new user"
      operationId: "apiUsersPOST"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "User to be created"
        required: true
        schema:
          $ref: "#/definitions/UserCreate"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
      x-swagger-router-controller: "Users"
  /api/users/{user-id}:
    get:
      tags:
      - "users"
      summary: "Retrieve a specific user"
      operationId: "apiUsersUser_idGET"
      produces:
      - "application/json"
      parameters:
      - name: "user-id"
        in: "path"
        description: "User ID"
        required: true
        type: "string"
        maxLength: 50
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
      x-swagger-router-controller: "Users"
    put:
      tags:
      - "users"
      summary: "Update an existing user"
      operationId: "apiUsersUser_idPUT"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "user-id"
        in: "path"
        description: "User ID"
        required: true
        type: "string"
        maxLength: 50
      - in: "body"
        name: "body"
        description: "User to be updated"
        required: true
        schema:
          $ref: "#/definitions/UserCreate"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
      x-swagger-router-controller: "Users"
    delete:
      tags:
      - "users"
      summary: "Delete an existing user"
      operationId: "apiUsersUser_idDELETE"
      produces:
      - "application/json"
      parameters:
      - name: "user-id"
        in: "path"
        description: "User ID"
        required: true
        type: "string"
        maxLength: 50
      responses:
        204:
          description: "successful operation"
      x-swagger-router-controller: "Users"
  /api/articles:
    get:
      tags:
      - "articles"
      summary: "Retrieve all available articles"
      operationId: "apiArticlesGET"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Article"
      x-swagger-router-controller: "Articles"
    post:
      tags:
      - "articles"
      summary: "Create a new article"
      operationId: "apiArticlesPOST"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Article to be created"
        required: true
        schema:
          $ref: "#/definitions/ArticleCreate"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Article"
      x-swagger-router-controller: "Articles"
  /api/articles/{article-id}:
    get:
      tags:
      - "articles"
      summary: "Retrieve a specific article"
      operationId: "apiArticlesArticle_idGET"
      parameters:
      - name: "article-id"
        in: "path"
        description: "Article ID"
        required: true
        type: "string"
        maxLength: 50
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Article"
      x-swagger-router-controller: "Articles"
    delete:
      tags:
      - "articles"
      summary: "Delete an existing article"
      operationId: "apiArticlesArticle_idDELETE"
      produces:
      - "application/json"
      parameters:
      - name: "article-id"
        in: "path"
        description: "Article ID"
        required: true
        type: "string"
        maxLength: 50
      responses:
        204:
          description: "successful operation"
      x-swagger-router-controller: "Articles"
  /api/articles/comments/{article-id}:
    get:
      tags:
      - "articles"
      summary: "Retrieve all comments from an article"
      operationId: "apiArticlesCommentsArticle_idGET"
      produces:
      - "application/json"
      parameters:
      - name: "article-id"
        in: "path"
        description: "Article ID"
        required: true
        type: "string"
        maxLength: 50
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Comment"
      x-swagger-router-controller: "Articles"
  /api/comments/{comment-id}:
    get:
      tags:
      - "comments"
      summary: "Retrieve a specific comment"
      operationId: "apiCommentsComment_idGET"
      produces:
      - "application/json"
      parameters:
      - name: "comment-id"
        in: "path"
        description: "Comment ID"
        required: true
        type: "string"
        maxLength: 50
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Comment"
      x-swagger-router-controller: "Comments"
    delete:
      tags:
      - "comments"
      summary: "Delete an existing comment"
      operationId: "apiCommentsComment_idDELETE"
      parameters:
      - name: "comment-id"
        in: "path"
        description: "Comment ID"
        required: true
        type: "string"
        maxLength: 50
      responses:
        204:
          description: "successful operation"
      x-swagger-router-controller: "Comments"
  /api/comments/{comment-id}/{article-id}:
    post:
      tags:
      - "comments"
      summary: "Create a new comment"
      operationId: "apiCommentsComment_idArticle_idPOST"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "article-id"
        in: "path"
        description: "Article ID"
        required: true
        type: "string"
        maxLength: 50
      - name: "comment-id"
        in: "path"
        description: "Comment ID"
        required: true
        type: "string"
        maxLength: 50
      - in: "body"
        name: "body"
        description: "Comment to be created"
        required: true
        schema:
          $ref: "#/definitions/CommentCreate"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Comment"
      x-swagger-router-controller: "Comments"
definitions:
  User:
    type: "object"
    required:
    - "city"
    - "email"
    - "firstname"
    - "lastname"
    - "street"
    - "streetNumber"
    - "zipCode"
    properties:
      firstname:
        type: "string"
      lastname:
        type: "string"
      zipCode:
        type: "integer"
        format: "int4"
      city:
        type: "string"
      street:
        type: "string"
      streetNumber:
        type: "integer"
        format: "int4"
      email:
        type: "string"
      password:
        type: "string"
        format: "password"
    example:
      zipCode: 0
      firstname: "firstname"
      password: "password"
      city: "city"
      streetNumber: 6
      street: "street"
      email: "email"
      lastname: "lastname"
  UserCreate:
    type: "object"
    required:
    - "email"
    - "firstname"
    - "lastname"
    - "password"
    properties:
      firstname:
        type: "string"
        maxLength: 50
      lastname:
        type: "string"
        maxLength: 50
      zipCode:
        type: "integer"
        format: "int4"
      city:
        type: "string"
        maxLength: 50
      street:
        type: "string"
        maxLength: 50
      streetNumber:
        type: "integer"
        format: "int4"
      email:
        type: "string"
        maxLength: 50
      password:
        type: "string"
        format: "password"
        minLength: 6
        maxLength: 50
    example:
      zipCode: 0
      firstname: "firstname"
      password: "password"
      city: "city"
      streetNumber: 6
      street: "street"
      email: "email"
      lastname: "lastname"
  Article:
    type: "object"
    required:
    - "author"
    - "date"
    - "headline"
    - "text"
    - "topic"
    properties:
      headline:
        type: "string"
      author:
        type: "string"
      text:
        type: "string"
      date:
        type: "string"
        format: "date"
      topic:
        type: "array"
        items:
          format: string
    example:
      date: "2000-01-23"
      author: "author"
      topic: []
      text: "text"
      headline: "headline"
  ArticleCreate:
    type: "object"
    required:
    - "date"
    - "headline"
    - "text"
    - "topic"
    properties:
      headline:
        type: "string"
      author:
        type: "string"
        maxLength: 50
      text:
        type: "string"
      date:
        type: "string"
        format: "date"
      topic:
        type: "array"
        items:
          format: string
    example:
      date: "2000-01-23"
      author: "author"
      topic: []
      text: "text"
      headline: "headline"
  Comment:
    type: "object"
    required:
    - "articleId"
    - "author"
    - "date"
    - "text"
    properties:
      articleId:
        type: "string"
      author:
        type: "string"
      text:
        type: "string"
      date:
        type: "string"
        format: "date"
    example:
      date: "2000-01-23"
      author: "author"
      articleId: "articleId"
      text: "text"
  CommentCreate:
    type: "object"
    required:
    - "articleId"
    - "author"
    - "date"
    - "text"
    properties:
      articleId:
        type: "string"
        maxLength: 50
      author:
        type: "string"
        maxLength: 50
      text:
        type: "string"
      date:
        type: "string"
        format: "date"
    example:
      date: "2000-01-23"
      author: "author"
      articleId: "articleId"
      text: "text"
